import { createServerSupabaseClient } from "@supabase/auth-helpers-nextjs";
import Head from "next/head";
import Layout from "../components/layout";
import { supabase } from "../lib/supabaseClient";
import { useUser, useSupabaseClient } from "@supabase/auth-helpers-react";
import { use, useState } from "react";
import style from "@/styles/loggin.module.css";

export default function Profile() {
  //const { data } = supabase.auth.getUser();
  const supabaseClient = useSupabaseClient();
  const user = useUser();
  const [username, setUsername] = useState("");
  const [weight, setWeight] = useState(0);
  const [gender, setGender] = useState("");
  const [userid, setUserid] = useState("");
  const [modifying, setModifying] = useState(false);
  const [once, setOnce] = useState(false);
  //console.log(user);

  const changeUserData = async (username, weight, gender, userid) => {
    console.log("trying to update");
    console.log(username, weight, gender, userid);
    try {
      const { data, error } = await supabase
        .from("profiles")
        .update({
          username: username,
          weight: weight,
          gender: gender,
        })
        .eq("id", userid);

      if (error) {
        console.log("Error updating user data:", error);
      } else {
        console.log("User data updated successfully:", data);
      }
    } catch (error) {
      console.log("An error occurred while updating user data:", error);
    }
  };

  if (user && !once) {
    console.log("userid", user.id);
    getUserData(user.id).then((data) => {
      setUsername(data[0].username);
      setWeight(data[0].weight);
      setGender(data[0].gender);
      setUserid(data[0].id);
    });
    setOnce(true);
  }

  return (
    <Layout>
      <Head>
        <title>GazeEDIfication</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link
          rel="icon"
          type="image/png"
          sizes="32x32"
          href="/favicon-32x32.png"
        />
      </Head>
      <div className={style.main_loggin}>
        <div className="container logging-container">
          <div className="card">
            <div className="card-body">
              <div className="row">
                <div className="row">
                  {user ? (
                    <>
                      <h2 className="text-dark">Profil</h2>
                      <form>
                        <div className="mb-3">
                          <label className="form-label text-dark">
                            pseudo :{" "}
                          </label>
                          {!modifying ? (
                            <p className="text-dark">{username}</p>
                          ) : (
                            <input
                              value={username}
                              className="form-control"
                              id="exampleInputEmail1"
                              aria-describedby="emailHelp"
                              onChange={(e) => setUsername(e.target.value)}
                            />
                          )}
                        </div>
                        <div className="mb-3">
                          <label className="form-label text-dark">
                            poids :{" "}
                          </label>
                          {!modifying ? (
                            <p className="text-dark">{weight}</p>
                          ) : (
                            <input
                              value={weight}
                              type="number"
                              className="form-control"
                              id="exampleFormControlInput1"
                              placeholder="120 (beau bestiau)"
                              onChange={(e) => setWeight(e.target.value)}
                            />
                          )}
                        </div>
                        <div className="mb-3">
                          <label className="form-label text-dark">
                            sexe :{" "}
                          </label>
                          {!modifying ? (
                            <p className="text-dark"> {gender}</p>
                          ) : (
                            <>
                              <div className="row">
                                <div
                                  className="col"
                                  onChange={(e) => setGender(e.target.value)}
                                >
                                  <div className="form-check">
                                    <input
                                      checked={gender === "female"}
                                      className="form-check-input "
                                      type="radio"
                                      name="flexRadioDefault"
                                      id="flexRadioDefault1"
                                      value="female"
                                    />
                                    <label className="form-check-label text-dark">
                                      Femme
                                    </label>
                                  </div>
                                  <div className="form-check">
                                    <input
                                      checked={gender === "male"}
                                      className="form-check-input"
                                      type="radio"
                                      name="flexRadioDefault"
                                      id="flexRadioDefault2"
                                      value="male"
                                    />
                                    <label className="form-check-label mb-3 text-dark">
                                      Homme
                                    </label>
                                  </div>
                                </div>
                              </div>
                            </>
                          )}
                        </div>
                      </form>
                    </>
                  ) : null}
                </div>
                {!modifying ? (
                  <>
                    <div
                      className={style.switchlog}
                      onClick={() => setModifying(!modifying)}
                    >
                      <a className="text-secondary">Ã©diter le profil</a>
                    </div>
                  </>
                ) : (
                  <div
                    className={style.switchlog}
                    onClick={() => {
                      setModifying(!modifying);
                      changeUserData(username, weight, gender, userid);
                    }}
                  >
                    <a className="text-secondary">confirmer</a>
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>
    </Layout>
  );
}

const getUserData = async (id) => {
  const { data, error } = await supabase
    .from("profiles")
    .select("*")
    .eq("id", id);
  if (error) {
    console.log(error);
  }
  return data;
};
// export const getServerSideProps = async () => {
//   // Create authenticated Supabase Client
//   // const { data } = await SupabaseClient.from("profiles").select("*");
//   //return { props: { data } };
// };
